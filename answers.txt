# Here I have Lab2 Ready #

### at Lab 1 ###
Design Decisions/Justifications of Any Change
    at TupleTest and TupleDescTest
    - I have created ArrayList in TupleDesc. Why? -> I needed arraylike datastructure for the TDItems and the size had to be malleable.
    - I have added toString method HeapPageId and PageId to make getting the hashCode easier.

    at CatalogTest
    - I created a class called table to keep all the data for addTable in a bundle.
    - I needed some sort of way to keep multiple tables, so I chose ArrayList.

    at BufferPool
    - I am currently not thinking about the eviction of the page since in BufferPool.java, the method evict is said to be not necessary at this point.
    - This one I changed a lot after getting stuck with the last system test with HeapFile

    at HeapPageId, RecordId, HeapPageRead
    - Discussed a lot in the class, so was not really hard for me

    at HeapFile
    - I spent the most time on this phase
    - I have added HeapFileIterator in HeapFile.java -> because the DbFileIterator was just an abstract class.

    at SeqScan
    - This took me significant amount of time too, because you have to change all the other files to make this work.

Any missing or incomplete elements of my code
    I think I am fine but if the test case tests if I can evict the page or not, I am not ready yet
    (and that is because evicting page was not supposed to be implemented at this point!).

How long I spent in the lab, whether there was anything I found particularly difficult or confusing
    I spent around 30 hours total.
    I found the dependency issues always difficult to resolve, and I was consistently confused how each class interacted with each other in the begginning.
    BufferPool was particularly confusing since it doesn't even have a test until the last moment, I spent 3, 4 hours just rummaging through the code and slides
    of how they interacted with other classes.
    It was hard to debug for me, if I can run the code somehow and create a break point in an IDE to see the stack trace,
    I think I would have saved 2 hours debugging the code, especially for the last test which deals with BufferPool at the end.


### at Lab 2 ###
Design Decisions/Justification of Any Change
- I have made the page eviction policy just popping the page that is used the oldest. This was because it was simpler to implement than LRU cache, and somewhat closer to the LRU cache. I didn't want to implement the LRU because when you use the same page that you have used, you need to update the timestamp, and change the order of eviction

BufferPool.java
- I have tidConverter because flushPages took the argument tid
- page2evict is the one that decides the page to evict

Delete.java/Insert.java
- it adds calledOnce for both so that when the Operators are called two or more times, it wouldn't work

HeapFile.java/HeapPage.java
- I have added header2String and toString for debugging purposes. I left it because I will need it for the later labs.
- InsertTuple for HeapFile.java sees if there is any pages that has empty slots, if not it creates new pages and writes the page. 

- I should not have any missing part of the code.
- I spent around 15 - 20 hours on this lab.
